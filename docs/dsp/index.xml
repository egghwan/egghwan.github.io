<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Digital-Signal-Processing on </title>
    <link>https://egghwan.github.io/docs/dsp/</link>
    <description>Recent content in Digital-Signal-Processing on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 May 2023 00:44:31 +0100</lastBuildDate>
    <atom:link href="https://egghwan.github.io/docs/dsp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Decimation vs Down-sampling</title>
      <link>https://egghwan.github.io/docs/dsp/decimation_downsampling/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/dsp/decimation_downsampling/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-문서-설명&#34;&gt;1. 문서 설명 &lt;a href=&#34;#1-%eb%ac%b8%ec%84%9c-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;신호처리를 할 때 Decimation과 down-sampling는 헷갈리는 개념이다.&lt;/p&gt;&#xA;&lt;p&gt;Decimation과 down-sampling의 의미에 대해 알아보고, 신호처리 관점 및 RTL구현 관점에서 해당 개념을 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-정의&#34;&gt;2. 정의 &lt;a href=&#34;#2-%ec%a0%95%ec%9d%98&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Decimation : 디지털 신호를 먼저 Low-Pass-Filtering(LPF)를 수행하고, 디지털 신호를 구성하는 샘플들 중 특정 간격의 샘플만 취한다.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;down-sampling : 디지털 신호를 구성하는 샘플들 중 특정 간격의 샘플만 취하고 끝난다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FIR Filter</title>
      <link>https://egghwan.github.io/docs/dsp/fir_filter/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/dsp/fir_filter/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-문서-설명&#34;&gt;1. 문서 설명 &lt;a href=&#34;#1-%eb%ac%b8%ec%84%9c-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;신호처리 분야에서 매우 많이 쓰이는 Fir Filter를 신호처리 관점 및 RTL 구현 관점에서 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-정의&#34;&gt;2. 정의 &lt;a href=&#34;#2-%ec%a0%95%ec%9d%98&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;FIR Filter : FIR은 Finite-Impulse-Response 의 약자이다. FIR 필터는 계수가 시간 축에서 유한한 필터이다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-신호처리-관점&#34;&gt;3. 신호처리 관점 &lt;a href=&#34;#3-%ec%8b%a0%ed%98%b8%ec%b2%98%eb%a6%ac-%ea%b4%80%ec%a0%90&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;31-convolution의-시간-축-분석&#34;&gt;3.1 Convolution의 시간 축 분석 &lt;a href=&#34;#31-convolution%ec%9d%98-%ec%8b%9c%ea%b0%84-%ec%b6%95-%eb%b6%84%ec%84%9d&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;FIR Filter를 이해하려면 먼저 Convolution 연산에 대해 이해해야 한다. 먼저 시간 축에서 Convolution 식에 대해 알아보자.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interpolation vs Upsampling</title>
      <link>https://egghwan.github.io/docs/dsp/interpolation_upsampling/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/dsp/interpolation_upsampling/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-문서-설명&#34;&gt;1. 문서 설명 &lt;a href=&#34;#1-%eb%ac%b8%ec%84%9c-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;신호처리를 할 때 Interpolation과 Up-sampling은 헷갈리는 개념이다.&lt;/p&gt;&#xA;&lt;p&gt;Interpolation을 정확히 이해하기 위해서 먼저 Interpolation과 Up-sampling의 의미에 대해 알아보고, 신호처리 관점 및 RTL구현 관점에서 해당 개념을 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-정의&#34;&gt;2. 정의 &lt;a href=&#34;#2-%ec%a0%95%ec%9d%98&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Interpolation : 디지털 신호를 먼저 샘플들 사이에 0을 집어넣어 up-sampling을 진행한다. 그 다음 Low-Pass-Filtering을 수행한다.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Up-sampling : 디지털 신호를 샘플들 사이에 up-sampling factor 만큼 0을 넣어 up-sampling을 한다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
