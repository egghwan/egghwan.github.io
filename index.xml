<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://egghwan.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 08 Sep 2023 05:12:51 +0100</lastBuildDate>
    <atom:link href="https://egghwan.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Démarrage rapide</title>
      <link>https://egghwan.github.io/fr/docs/quickstart/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate>
      <guid>https://egghwan.github.io/fr/docs/quickstart/</guid>
      <description>&lt;h2 id=&#34;créer-un-nouveau-contenu&#34;&gt;Créer un nouveau contenu&lt;/h2&gt;&#xA;&lt;p&gt;Navigate to the root of your Hugo project and use the &lt;code&gt;hugo new&lt;/code&gt; command to create a file in the &lt;code&gt;content/docs&lt;/code&gt; directory:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;hugo new docs/example-page.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a markdown file named &lt;code&gt;example-page.md&lt;/code&gt; with the following default front matter:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span&gt;+++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span&gt;title = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Example Page&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span&gt;description = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span&gt;icon = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;article&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span&gt;date = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023-05-22T00:27:57+01:00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span&gt;lastmod = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023-05-22T00:27:57+01:00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span&gt;draft = &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span&gt;toc = &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span&gt;weight = &lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span&gt;+++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Modify the options to suit your needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Schnellstart</title>
      <link>https://egghwan.github.io/de/docs/quickstart/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate>
      <guid>https://egghwan.github.io/de/docs/quickstart/</guid>
      <description>&lt;h2 id=&#34;neue-inhalte-erstellen&#34;&gt;Neue Inhalte erstellen&lt;/h2&gt;&#xA;&lt;p&gt;Navigate to the root of your Hugo project and use the &lt;code&gt;hugo new&lt;/code&gt; command to create a file in the &lt;code&gt;content/docs&lt;/code&gt; directory:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;hugo new docs/example-page.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a markdown file named &lt;code&gt;example-page.md&lt;/code&gt; with the following default front matter:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span&gt;+++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span&gt;title = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Example Page&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span&gt;description = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span&gt;icon = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;article&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span&gt;date = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023-05-22T00:27:57+01:00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span&gt;lastmod = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2023-05-22T00:27:57+01:00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span&gt;draft = &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span&gt;toc = &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span&gt;weight = &lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span&gt;+++&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Modify the options to suit your needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AXI4-Lite LED Demo</title>
      <link>https://egghwan.github.io/docs/fpga-demo/axi4-lite-led_demo/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/fpga-demo/axi4-lite-led_demo/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-데모-설명&#34;&gt;1. 데모 설명 &lt;a href=&#34;#1-%eb%8d%b0%eb%aa%a8-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AXI4-LITE 프로토콜을 활용하여 FPGA의 PS-PL간 인터페이스 연결을 수행하여 PS에서 PL영역의 LED를 켜거나 끄는 명령을 내리고, PS에서 PL영역의 LED의 현재 상태를 읽어오는 데모에 대해 기술한다.&lt;/p&gt;&#xA;&lt;p&gt;보드는 Zybo-Z7-10 보드를 활용하지만 다른 보드에도 응용 가능하다.&lt;/p&gt;&#xA;&lt;p&gt;해당 데모를 수행하기 위해 FPGA에 Petalinux가 빌드되어 있어야 한다. (&lt;a href=&#34;https://egghwan.github.io/docs/fpga-demo/petalinux_build_demo/&#34; rel=&#34;external&#34; target=&#34;_blank&#34;&gt;Petalinux 빌드 참고 링크)&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 24 24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z&#34;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code</title>
      <link>https://egghwan.github.io/fr/docs/example-content/code/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/fr/docs/example-content/code/</guid>
      <description>&lt;h2 id=&#34;code-block-examples&#34;&gt;Code Block Examples&lt;/h2&gt;&#xA;&lt;p&gt;Code block language examples&lt;/p&gt;&#xA;&lt;h3 id=&#34;go&#34;&gt;Go&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;html&#34;&gt;HTML&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;My First Heading&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;My first paragraph.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;# H1 heading&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span&gt;**Some bold text**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;text-decoration:underline&#34;&gt;*Italic text example*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Decimation vs Down-sampling</title>
      <link>https://egghwan.github.io/docs/dsp/decimation_downsampling/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/dsp/decimation_downsampling/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-문서-설명&#34;&gt;1. 문서 설명 &lt;a href=&#34;#1-%eb%ac%b8%ec%84%9c-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;신호처리를 할 때 Decimation과 down-sampling는 헷갈리는 개념이다.&lt;/p&gt;&#xA;&lt;p&gt;Decimation과 down-sampling의 의미에 대해 알아보고, 신호처리 관점 및 RTL구현 관점에서 해당 개념을 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-정의&#34;&gt;2. 정의 &lt;a href=&#34;#2-%ec%a0%95%ec%9d%98&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Decimation : 디지털 신호를 먼저 Low-Pass-Filtering(LPF)를 수행하고, 디지털 신호를 구성하는 샘플들 중 특정 간격의 샘플만 취한다.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;down-sampling : 디지털 신호를 구성하는 샘플들 중 특정 간격의 샘플만 취하고 끝난다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FIR Filter</title>
      <link>https://egghwan.github.io/docs/dsp/fir_filter/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/dsp/fir_filter/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-문서-설명&#34;&gt;1. 문서 설명 &lt;a href=&#34;#1-%eb%ac%b8%ec%84%9c-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;신호처리 분야에서 매우 많이 쓰이는 Fir Filter를 신호처리 관점 및 RTL 구현 관점에서 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-정의&#34;&gt;2. 정의 &lt;a href=&#34;#2-%ec%a0%95%ec%9d%98&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;FIR Filter : FIR은 Finite-Impulse-Response 의 약자이다. FIR 필터는 계수가 시간 축에서 유한한 필터이다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-신호처리-관점&#34;&gt;3. 신호처리 관점 &lt;a href=&#34;#3-%ec%8b%a0%ed%98%b8%ec%b2%98%eb%a6%ac-%ea%b4%80%ec%a0%90&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;31-convolution의-시간-축-분석&#34;&gt;3.1 Convolution의 시간 축 분석 &lt;a href=&#34;#31-convolution%ec%9d%98-%ec%8b%9c%ea%b0%84-%ec%b6%95-%eb%b6%84%ec%84%9d&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;FIR Filter를 이해하려면 먼저 Convolution 연산에 대해 이해해야 한다. 먼저 시간 축에서 Convolution 식에 대해 알아보자.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I2C Protocol Demo</title>
      <link>https://egghwan.github.io/docs/fpga-demo/i2c_interface_demo/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/fpga-demo/i2c_interface_demo/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-데모-설명&#34;&gt;1. 데모 설명 &lt;a href=&#34;#1-%eb%8d%b0%eb%aa%a8-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zybo Z7-10 FPGA 보드에서 I2C-Protocol을 활용해 외부 장치인 Display를 제어하는 방법을 기술한다.&lt;/p&gt;&#xA;&lt;p&gt;I2C 프로토콜의 동작원리를 파악하고 Verilog를 활용해 I2C-Protocol를 설계한다. 그 다음 SSD 1306 드라이버 기반으로 동작하는 디스플레이 주변장치를 FPGA와 연결하여 제어하는 DEMO를 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-i2c-프로토콜&#34;&gt;2. I2C 프로토콜 &lt;a href=&#34;#2-i2c-%ed%94%84%eb%a1%9c%ed%86%a0%ec%bd%9c&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I2C 프로토콜이란 서로 다른 두 개의 칩 사이의 통신 프로토콜 중 하나이다.&lt;/p&gt;&#xA;&lt;p&gt;I2C 프로토콜은 한 개의 Master가 여러 개의 Slave를 제어할 때 사용할 수 있는 프로토콜이다. 또한 I2C 프로토콜은 Master와 Slave가 클럭에 동기화 되어 동작하는 프로토콜이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interpolation vs Upsampling</title>
      <link>https://egghwan.github.io/docs/dsp/interpolation_upsampling/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/dsp/interpolation_upsampling/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-문서-설명&#34;&gt;1. 문서 설명 &lt;a href=&#34;#1-%eb%ac%b8%ec%84%9c-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;신호처리를 할 때 Interpolation과 Up-sampling은 헷갈리는 개념이다.&lt;/p&gt;&#xA;&lt;p&gt;Interpolation을 정확히 이해하기 위해서 먼저 Interpolation과 Up-sampling의 의미에 대해 알아보고, 신호처리 관점 및 RTL구현 관점에서 해당 개념을 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-정의&#34;&gt;2. 정의 &lt;a href=&#34;#2-%ec%a0%95%ec%9d%98&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Interpolation : 디지털 신호를 먼저 샘플들 사이에 0을 집어넣어 up-sampling을 진행한다. 그 다음 Low-Pass-Filtering을 수행한다.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Up-sampling : 디지털 신호를 샘플들 사이에 up-sampling factor 만큼 0을 넣어 up-sampling을 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>lib_axis_fifo_async.v</title>
      <link>https://egghwan.github.io/docs/rtl-ip/lib_async_fifo/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/rtl-ip/lib_async_fifo/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;모듈-설명&#34;&gt;모듈 설명 &lt;a href=&#34;#%eb%aa%a8%eb%93%88-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Asynchronous FIFO에 대한 개념을 설명하고 AXI4-Stream 인터페이스에 맞게 RTL로 구현하는 과정을 기술한다.&lt;/p&gt;&#xA;&lt;p&gt;Synchornous FIFO의 이해가 없다면 해당 게시물의 내용이 이해가 안 갈 것이므로, 왼쪽 링크에서 먼저 Sync FIFO의 개념을 이해하고 오자. (&lt;a href=&#34;https://egghwan.github.io/docs/rtl-ip/lib_sync_fifo/&#34; rel=&#34;external&#34; target=&#34;_blank&#34;&gt;Synchornous FIFO 참고 링크)&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 24 24&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M14 5c-.552 0-1-.448-1-1s.448-1 1-1h6c.552 0 1 .448 1 1v6c0 .552-.448 1-1 1s-1-.448-1-1v-3.586l-7.293 7.293c-.391.39-1.024.39-1.414 0-.391-.391-.391-1.024 0-1.414l7.293-7.293h-3.586zm-9 2c-.552 0-1 .448-1 1v11c0 .552.448 1 1 1h11c.552 0 1-.448 1-1v-4.563c0-.552.448-1 1-1s1 .448 1 1v4.563c0 1.657-1.343 3-3 3h-11c-1.657 0-3-1.343-3-3v-11c0-1.657 1.343-3 3-3h4.563c.552 0 1 .448 1 1s-.448 1-1 1h-4.563z&#34;/&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>lib_axis_fifo_sync.v</title>
      <link>https://egghwan.github.io/docs/rtl-ip/lib_sync_fifo/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/rtl-ip/lib_sync_fifo/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;모듈-설명&#34;&gt;모듈 설명 &lt;a href=&#34;#%eb%aa%a8%eb%93%88-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Synchronous FIFO에 대한 개념을 설명하고 AXI4-Stream 인터페이스에 맞게 RTL로 구현하는 과정을 기술한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-synchronous-fifo-란&#34;&gt;1. Synchronous FIFO 란? &lt;a href=&#34;#1-synchronous-fifo-%eb%9e%80&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;FIFO(First-In-First-Out)의 줄임말이다. 말 그대로 먼저 들어온 데이터가 먼저 나간다는 뜻이다.&lt;/p&gt;&#xA;&lt;p&gt;FIFO는 기본적으로 읽기 포인터와 쓰기 포인터로 동작한다. 아래 예제를 통해 FIFO의 동작원리를 알아보자.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-synchronous-fifo-예제&#34;&gt;2. Synchronous FIFO 예제 &lt;a href=&#34;#2-synchronous-fifo-%ec%98%88%ec%a0%9c&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;DEPTH가 8인 FIFO를 예제로 설명을 진행한다. DEPTH란 FIFO에 저장될 수 있는 데이터 개수를 의미한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Petalinux Build Demo (Zybo-z7-10)</title>
      <link>https://egghwan.github.io/docs/fpga-demo/petalinux_build_demo/</link>
      <pubDate>Mon, 22 May 2023 00:44:31 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/fpga-demo/petalinux_build_demo/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;1-데모-설명&#34;&gt;1. 데모 설명 &lt;a href=&#34;#1-%eb%8d%b0%eb%aa%a8-%ec%84%a4%eb%aa%85&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zybo Z7-10 FPGA 보드에서 Petalinux를 빌드하는 방법을 기술한다.&lt;/p&gt;&#xA;&lt;p&gt;본 문서는 Zybo z7-10 보드를 기준으로 설명된 문서지만, 다른 Xilinx FPGA 보드에도 적용 가능하다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-what-is-petalinux&#34;&gt;2. What is Petalinux? &lt;a href=&#34;#2-what-is-petalinux&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Petalinux란 Vivado FPGA에 포팅 가능한 운영체제를 뜻한다. 운영체제 안에는 커널, 쉘, 네트워크 등등 다양한 디바이스 드라이버가 미리 구현되어 있기 때문에 개발 시간을 단축할 수 있다. 또한 운영체제가 자원을 효과적으로 관리 가능하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mermaid</title>
      <link>https://egghwan.github.io/docs/rtl-ip/mermaid/</link>
      <pubDate>Fri, 08 Sep 2023 05:12:51 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/rtl-ip/mermaid/</guid>
      <description>&lt;h2 id=&#34;flowchart&#34;&gt;Flowchart &lt;a href=&#34;#flowchart&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;flowchart LR&#xD;&#xA;&#xD;&#xA;A[Hard] --&amp;gt;|Text| B(Round)&#xD;&#xA;B --&amp;gt; C{Decision}&#xD;&#xA;C --&amp;gt;|One| D[Result 1]&#xD;&#xA;C --&amp;gt;|Two| E[Result 2]&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;sequence-diagram&#34;&gt;Sequence diagram &lt;a href=&#34;#sequence-diagram&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;sequenceDiagram&#xD;&#xA;Alice-&amp;gt;&amp;gt;John: Hello John, how are you?&#xD;&#xA;loop Healthcheck&#xD;&#xA;    John-&amp;gt;&amp;gt;John: Fight against hypochondria&#xD;&#xA;end&#xD;&#xA;Note right of John: Rational thoughts!&#xD;&#xA;John--&amp;gt;&amp;gt;Alice: Great!&#xD;&#xA;John-&amp;gt;&amp;gt;Bob: How about you?&#xD;&#xA;Bob--&amp;gt;&amp;gt;John: Jolly good!&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;gantt-chart&#34;&gt;Gantt Chart &lt;a href=&#34;#gantt-chart&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;gantt&#xD;&#xA;    section Section&#xD;&#xA;    Completed :done,    des1, 2014-01-06,2014-01-08&#xD;&#xA;    Active        :active,  des2, 2014-01-07, 3d&#xD;&#xA;    Parallel 1   :         des3, after des1, 1d&#xD;&#xA;    Parallel 2   :         des4, after des1, 1d&#xD;&#xA;    Parallel 3   :         des5, after des3, 1d&#xD;&#xA;    Parallel 4   :         des6, after des4, 1d&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;class-diagram&#34;&gt;Class diagram &lt;a href=&#34;#class-diagram&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;classDiagram&#xD;&#xA;Class01 &amp;lt;|-- AveryLongClass : Cool&#xD;&#xA;&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01&#xD;&#xA;Class09 --&amp;gt; C2 : Where am i?&#xD;&#xA;Class09 --* C3&#xD;&#xA;Class09 --|&amp;gt; Class07&#xD;&#xA;Class07 : equals()&#xD;&#xA;Class07 : Object[] elementData&#xD;&#xA;Class01 : size()&#xD;&#xA;Class01 : int chimp&#xD;&#xA;Class01 : int gorilla&#xD;&#xA;class Class10 {&#xD;&#xA;  &amp;gt;&amp;gt;service&amp;gt;&amp;gt;&#xD;&#xA;  int id&#xD;&#xA;  size()&#xD;&#xA;}&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;state-diagram&#34;&gt;State diagram &lt;a href=&#34;#state-diagram&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;stateDiagram-v2&#xD;&#xA;[*] --&amp;gt; Still&#xD;&#xA;Still --&amp;gt; [*]&#xD;&#xA;Still --&amp;gt; Moving&#xD;&#xA;Moving --&amp;gt; Still&#xD;&#xA;Moving --&amp;gt; Crash&#xD;&#xA;Crash --&amp;gt; [*]&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;pie-chart&#34;&gt;Pie Chart &lt;a href=&#34;#pie-chart&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;pie&#xD;&#xA;&amp;#34;Dogs&amp;#34; : 386&#xD;&#xA;&amp;#34;Cats&amp;#34; : 85.9&#xD;&#xA;&amp;#34;Rats&amp;#34; : 15&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;git-graph&#34;&gt;Git Graph &lt;a href=&#34;#git-graph&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;    gitGraph&#xD;&#xA;      commit&#xD;&#xA;      commit&#xD;&#xA;      branch develop&#xD;&#xA;      checkout develop&#xD;&#xA;      commit&#xD;&#xA;      commit&#xD;&#xA;      checkout main&#xD;&#xA;      merge develop&#xD;&#xA;      commit&#xD;&#xA;      commit&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;bar-chart-using-gantt-chart&#34;&gt;Bar chart (using gantt chart) &lt;a href=&#34;#bar-chart-using-gantt-chart&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;gantt&#xD;&#xA;    title Git Issues - days since last update&#xD;&#xA;    dateFormat  X&#xD;&#xA;    axisFormat %s&#xD;&#xA;&#xD;&#xA;    section Issue19062&#xD;&#xA;    71   : 0, 71&#xD;&#xA;    section Issue19401&#xD;&#xA;    36   : 0, 36&#xD;&#xA;    section Issue193&#xD;&#xA;    34   : 0, 34&#xD;&#xA;    section Issue7441&#xD;&#xA;    9    : 0, 9&#xD;&#xA;    section Issue1300&#xD;&#xA;    5    : 0, 5&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;user-journey-diagram&#34;&gt;User Journey diagram &lt;a href=&#34;#user-journey-diagram&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;  journey&#xD;&#xA;    title My working day&#xD;&#xA;    section Go to work&#xD;&#xA;      Make tea: 5: Me&#xD;&#xA;      Go upstairs: 3: Me&#xD;&#xA;      Do work: 1: Me, Cat&#xD;&#xA;    section Go home&#xD;&#xA;      Go downstairs: 5: Me&#xD;&#xA;      Sit down: 3: Me&#xA;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;c4-diagram&#34;&gt;C4 diagram &lt;a href=&#34;#c4-diagram&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;pre class=&#34;mermaid&#34;&gt;C4Context&#xD;&#xA;title System Context diagram for Internet Banking System&#xD;&#xA;&#xD;&#xA;Person(customerA, &amp;#34;Banking Customer A&amp;#34;, &amp;#34;A customer of the bank, with personal bank accounts.&amp;#34;)&#xD;&#xA;Person(customerB, &amp;#34;Banking Customer B&amp;#34;)&#xD;&#xA;Person_Ext(customerC, &amp;#34;Banking Customer C&amp;#34;)&#xD;&#xA;System(SystemAA, &amp;#34;Internet Banking System&amp;#34;, &amp;#34;Allows customers to view information about their bank accounts, and make payments.&amp;#34;)&#xD;&#xA;&#xD;&#xA;Person(customerD, &amp;#34;Banking Customer D&amp;#34;, &amp;#34;A customer of the bank, &amp;lt;br/&amp;gt; with personal bank accounts.&amp;#34;)&#xD;&#xA;&#xD;&#xA;Enterprise_Boundary(b1, &amp;#34;BankBoundary&amp;#34;) {&#xD;&#xA;&#xD;&#xA;  SystemDb_Ext(SystemE, &amp;#34;Mainframe Banking System&amp;#34;, &amp;#34;Stores all of the core banking information about customers, accounts, transactions, etc.&amp;#34;)&#xD;&#xA;&#xD;&#xA;  System_Boundary(b2, &amp;#34;BankBoundary2&amp;#34;) {&#xD;&#xA;    System(SystemA, &amp;#34;Banking System A&amp;#34;)&#xD;&#xA;    System(SystemB, &amp;#34;Banking System B&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  System_Ext(SystemC, &amp;#34;E-mail system&amp;#34;, &amp;#34;The internal Microsoft Exchange e-mail system.&amp;#34;)&#xD;&#xA;  SystemDb(SystemD, &amp;#34;Banking System D Database&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)&#xD;&#xA;&#xD;&#xA;  Boundary(b3, &amp;#34;BankBoundary3&amp;#34;, &amp;#34;boundary&amp;#34;) {&#xD;&#xA;    SystemQueue(SystemF, &amp;#34;Banking System F Queue&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)&#xD;&#xA;    SystemQueue_Ext(SystemG, &amp;#34;Banking System G Queue&amp;#34;, &amp;#34;A system of the bank, with personal bank accounts.&amp;#34;)&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;BiRel(customerA, SystemAA, &amp;#34;Uses&amp;#34;)&#xD;&#xA;BiRel(SystemAA, SystemE, &amp;#34;Uses&amp;#34;)&#xD;&#xA;Rel(SystemAA, SystemC, &amp;#34;Sends e-mails&amp;#34;, &amp;#34;SMTP&amp;#34;)&#xD;&#xA;Rel(SystemC, customerA, &amp;#34;Sends e-mails to&amp;#34;)&#xA;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Example Doc</title>
      <link>https://egghwan.github.io/docs/section-folder/section-subfolder/second-section-subfolder/third-section-subfolder/example-doc/</link>
      <pubDate>Wed, 03 May 2023 22:37:22 +0100</pubDate>
      <guid>https://egghwan.github.io/docs/section-folder/section-subfolder/second-section-subfolder/third-section-subfolder/example-doc/</guid>
      <description></description>
    </item>
    <item>
      <title>3.06 Pulse Shaping Filter</title>
      <link>https://egghwan.github.io/docs/wireless_communication/3_6_pulse_shaping_filter/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/wireless_communication/3_6_pulse_shaping_filter/</guid>
      <description>&lt;h2 id=&#34;36-pulse-shaping-filter&#34;&gt;3.6 Pulse Shaping Filter &lt;a href=&#34;#36-pulse-shaping-filter&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;통신 모뎀 설계를 위해 필요한 펄스 정형 필터에 대해 기술한다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;361-isiinter-symbol-interference란&#34;&gt;3.6.1 ISI(Inter-Symbol-Interference)란? &lt;a href=&#34;#361-isiinter-symbol-interference%eb%9e%80&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;한국어로 직역하면 심볼 간 간섭이다. 명확한 이해를 위해 아래 그림을 살펴보자.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;    &#xA;      &lt;img src=&#34;https://egghwan.github.io/images/content/pulse_shaping/pic1.png&#34; alt=&#34;Internal link preview tooltip&#34; width=&#34;783&#34; height=&#34;147&#34; loading=&#34;lazy&#34;&gt;&#xA;    &#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;빨간색 동그라미는 심볼이고 파란색 동그라미는 심볼을 4배 Upsampling한 샘플을 나타낸다. 위 심볼들은 시간 축에서 직사각형 형태를 띈다. 이렇게 직사각형 형태로 신호를 만들면 서로 다른 심볼은 다른 심볼 구간을 침범하지 않고 분리되어 있다. 이런 경우 심볼 간 간섭(ISI)가 없다고 말한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3.07 Quadrature Amplitude Modulation (QAM)</title>
      <link>https://egghwan.github.io/docs/wireless_communication/3_7_quadrature-amplitude-modulation---%EB%B3%B5%EC%82%AC%EB%B3%B8/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/wireless_communication/3_7_quadrature-amplitude-modulation---%EB%B3%B5%EC%82%AC%EB%B3%B8/</guid>
      <description>&lt;h2 id=&#34;371-qam-송신기-구조&#34;&gt;3.7.1 QAM 송신기 구조 &lt;a href=&#34;#371-qam-%ec%86%a1%ec%8b%a0%ea%b8%b0-%ea%b5%ac%ec%a1%b0&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;    &#xA;      &lt;img src=&#34;https://egghwan.github.io/images/content/qam/pic2.png&#34; alt=&#34;Internal link preview tooltip&#34; width=&#34;1085&#34; height=&#34;765&#34; loading=&#34;lazy&#34;&gt;&#xA;    &#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;위 그림은 QAM Modulator의 구조다. 위 구조를 바탕으로 단계를 따라가면 QAM Waveform이 생성되는 과정을 살펴본다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;3711-bits-to-symbol&#34;&gt;3.7.1.1 Bits to Symbol &lt;a href=&#34;#3711-bits-to-symbol&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;QAM 웨이브폼을 만들기 위한 순서에 대해 알아보자. 설명을 쉽게 하기 위해 2-QAM을 가정한다.&lt;/p&gt;&#xA;&lt;p&gt;2-QAM은 비트 1개가 심볼 1개에 매핑되는 QAM 변조 방식이다. 만약 4-QAM이라면 비트 2개가 심볼 1개에 매핑된다.&lt;/p&gt;&#xA;&lt;p&gt;먼저 비트레이트 $R_b$에 해당하는 속도로 비트가 생성된다. 2-QAM 기준으로 비트 1개가 심볼 1개를 구성하므로 심볼레이트 $T_M = R_b$가 성립한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3.10 Computing Error Rates</title>
      <link>https://egghwan.github.io/docs/wireless_communication/3_10_computing_error_rates/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/wireless_communication/3_10_computing_error_rates/</guid>
      <description>&lt;h2 id=&#34;310-computing-error-rates&#34;&gt;3.10 Computing Error Rates &lt;a href=&#34;#310-computing-error-rates&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;디지털 통신 모뎀을 설계하고 나면 성능을 측정해야 한다. 가장 대표적인 성능 측정 방법으로는 BER(Bit-Error-Rate) 또는 SER(Symbol-Error-Rates)있다.&#xA;BER 공식은 아래와 같다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;3101-ser-과-ber&#34;&gt;3.10.1 SER 과 BER &lt;a href=&#34;#3101-ser-%ea%b3%bc-ber&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;    &#xA;      &lt;img src=&#34;https://egghwan.github.io/images/content/ber/pic1.png&#34; alt=&#34;Internal link preview tooltip&#34; width=&#34;352&#34; height=&#34;118&#34; loading=&#34;lazy&#34;&gt;&#xA;    &#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;식은 간단하다. SER의 경우 에러가 난 심볼 개수를 전체 송신 심볼 개수로 나누면 된다.&lt;/p&gt;&#xA;&lt;p&gt;BER의 경우 에러나 난 비트 개수를 전체 송신 비트 개수로 나누면 된다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;3102-snr&#34;&gt;3.10.2 SNR &lt;a href=&#34;#3102-snr&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;SNR은 디지털 통신 모뎀의 성능을 측정할 때 가장 많이 사용되는 지표다. 정의는 신호 전력을 노이즈 전력으로 나눈 값이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>4.2 Basic Components of a PLL</title>
      <link>https://egghwan.github.io/docs/wireless_communication/4_02_basic-componets-of-a-pll/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/wireless_communication/4_02_basic-componets-of-a-pll/</guid>
      <description>&lt;h2 id=&#34;42-pll이란&#34;&gt;4.2 PLL이란 &lt;a href=&#34;#42-pll%ec%9d%b4%eb%9e%80&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PLL(Phase-Locked-Loop)는 말 그대로 위상을 고정하는 장치임을 의미한다.&lt;/p&gt;&#xA;&lt;p&gt;이게 통신 모뎀에서 왜 필요할까? 그것은 바로 무선 통신 환경에서 손상되는 송신 신호를 복구하여 수신 하기 위함이다.&lt;/p&gt;&#xA;&lt;p&gt;무선 통신 환경에서는 송신기와 수신기의 클럭이 독립적으로 동작한다. 만약 200MHz의 송신기 클럭과 200MHz의 수신기 클럭이 있다면 이 2개의 클럭이 과연 같을까?&lt;/p&gt;&#xA;&lt;p&gt;정답은 아니다. 우선 첫번째로 클럭의 시작 위상이 다를 수 있다.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;    &#xA;      &lt;img src=&#34;https://egghwan.github.io/images/content/PLL/pic1.png&#34; alt=&#34;Internal link preview tooltip&#34; width=&#34;611&#34; height=&#34;219&#34; loading=&#34;lazy&#34;&gt;&#xA;    &#xA;  &#xA;&lt;/p&gt;&#xA;&lt;p&gt;$V_1(t)$가 송신기 클럭이고 $V_2(t)$가 수신기 클럭이라고 하자.&lt;/p&gt;&#xA;&lt;p&gt;만약 데이터가 지연 시간 없이 전달된다고 가정한다면 시작 위상이 다르기 때문에 데이터를 수신하는 순간이 달라지게 된다. 따라서 데이터 시작 지점이 달라져 수신 불가능해진다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PL</title>
      <link>https://egghwan.github.io/docs/terms/pl_region/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/terms/pl_region/</guid>
      <description></description>
    </item>
    <item>
      <title>PS</title>
      <link>https://egghwan.github.io/docs/terms/ps_region/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/terms/ps_region/</guid>
      <description></description>
    </item>
    <item>
      <title>V.01 Polyphase Filterbank Implementation</title>
      <link>https://egghwan.github.io/docs/wireless_communication/10_1_polyphase-filterbank-implementation/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/wireless_communication/10_1_polyphase-filterbank-implementation/</guid>
      <description>&lt;h2 id=&#34;1011-polyphase-filterbank-란&#34;&gt;10.1.1 Polyphase Filterbank 란? &lt;a href=&#34;#1011-polyphase-filterbank-%eb%9e%80&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;3.06절에서 Pulse Shaping을 수행하기 위해서 심볼을 $L$만큼 Up-Sampling을 수행한다.&lt;/p&gt;&#xA;&lt;p&gt;SymbolRate를 $T_M$이라고 하면 SampleRate를 아래와 같이 정의할 수 있다.&lt;/p&gt;&#xA;&lt;p&gt;$$T_{S,1} = \frac{T_M}{L}$$&lt;/p&gt;&#xA;&lt;p&gt;이러한 구조엥서 우리는 Polyphase Filterbank 구조를 활용해 효율적인 송신기 구조를 만들 수 있다.&lt;/p&gt;&#xA;&lt;p&gt;심볼 당 샘플 $L=4$이고 Pulse Shaping Filter를 $p(nT_{s,1})$로 표현해보자.&lt;/p&gt;&#xA;&lt;p&gt;심볼 당 샘플이 $L$을 만족하기 위해서 심볼 사이에 0을 4개씩 추가하여 Up-Sampling을 수행한다. 따라서 실제로 심볼과 Pulse Shaping의 계수가 컨볼루션되는 순간은 4번째마다 일어난다. 왜냐하면 0은 컨볼루션 결과에 아무 의미가 없기 때문이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WSL</title>
      <link>https://egghwan.github.io/docs/terms/wsl/</link>
      <pubDate>Sun, 27 Nov 2022 07:08:15 +0000</pubDate>
      <guid>https://egghwan.github.io/docs/terms/wsl/</guid>
      <description></description>
    </item>
  </channel>
</rss>
